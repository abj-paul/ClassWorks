package producer.consumer.relationship;

import java.util.ArrayList;
import java.util.concurrent.ArrayBlockingQueue;

public class Storage {
	final int default_size = 30;
	private ArrayBlockingQueue<Integer> storage;
	int top_index;
	int size;
	
	Storage(){
		this.top_index=0;
		this.storage = new ArrayBlockingQueue<Integer>(default_size);
		this.size = this.default_size;
	}
	Storage(Integer[] arr){
		int size = (this.default_size<arr.length)?arr.length:this.default_size;
		this.size = size;
		this.storage = new ArrayBlockingQueue<Integer>(size);
		this.top_index = 0;
		for(Integer element: arr) storage.add(element);
	}
	
	void read() {
		synchronized(this) {
		System.out.printf("Reading %d from storage.\n",storage.element(top_index));
		}
	}
	void write(int x) {
		synchronized(this) {
		top_index++;
		if(this.top_index<this.storage.size()) this.storage.set(top_index, x);
		System.out.printf("Writing %d to storage.\n",x);
		}
	}
	int get_size() {
		return this.size;
	}
	
}
