import java.util.ArrayList;


abstract class PrintMode {
    int numberOfPages;
    int pageSize;
    String orientation;
    String colorIntensity;
    int costPerPage;

    abstract void saveToner();
    abstract void savePage();
    abstract void boost();
}

class TonerSaveMode extends PrintMode {
    int tonerSavingLevel;
    int HIGH, MEDIUM, LOW;

    @Override
    void saveToner(){ //DOUBT
	if(tonerSavingLevel==HIGH) reduceColorIntensityStandardAlgorithm();
	else if(tonerSavingLevel==MEDIUM) reduceColorIntnsityAlgorithmOne();
	else if(tonerSavingLevel==LOW) reduceColorIntnsityAlgorithmTwo();
    }
    @Override
    void savePage() {
	System.out.println("Save the page!");
    }
    @Override
    void boost() {
	System.out.println("Boost printing!");
    }

    void reduceColorIntensityStandardAlgorithm() {
	System.out.println("Standard Algorithm to reduce color intensity.");
    }
    void reduceColorIntnsityAlgorithmOne() {
	System.out.println("Standard Algorithm to reduce color intensity.");
    }
    void reduceColorIntnsityAlgorithmTwo() {
	System.out.println("Standard Algorithm to reduce color intensity.");
    }

    
}

class PageSaveMode extends PrintMode {
    void renderPreview(){
	//shows a preview of updated document (perhaps updated by the above algorithm.)
    }
    @Override
    void saveToner(){ //DOUBT
    }
    @Override
    void savePage() {
	// Adjust page size & Orientation to reduce the number of pages required.
	System.out.println("Save the page!");
    }
    @Override
    void boost() {
	System.out.println("Boost printing!");
    }
}

class BoosterSaveMode extends PrintMode {
    int intensityThreshold;
    @Override
    void saveToner(){ //DOUBT
    }
    @Override
    void savePage() {
	// Adjust page size & Orientation to reduce the number of pages required.
	System.out.println("Save the page!");
    }
    @Override
    void boost() { //increaseColorIntensityAlgorithm
	//increases color intensity up to a maximum acceptable level that is set via its intensityThreshold field.
	System.out.println("Boost printing!");
    }
}

class PrintJob {
    ArrayList<PrintRequest> printRequests;
    PrioritySetting prioritySetting;

    PrintJob(PrioritySetting prioritySetting) {
	this.prioritySetting = prioritySetting;
	this.printRequests = new ArrayList<PrintRequest>();
    }

    public PrintRequest pullJob(){
	int lastIndex = printRequests.size() - 1;
	return this.printRequests.remove(lastIndex);
    }
    public void pushJob(PrintRequest printRequest){
	this.printRequests.add(printRequest);
    }

    void changePriority(){

    }
}

class PrintRequest {
    Document document;
    PrintMode mode;
    public PrintRequest(Document document, PrintMode mode) {
	this.document = document;
	this.mode = mode;
    }
    
}
class Document {}

class PrioritySetting {
}


public class Problem {
    public static void main(String[] args) {
	PrioritySetting prioritySetting = new PrioritySetting();
	PrintJob printJob = new PrintJob(prioritySetting);
	
	Document document = new Document();
	PrintMode mode = new PageSaveMode();
	PrintRequest printRequest = new PrintRequest(document, mode);
	
	printJob.pushJob(printRequest);
    }
}
