from itertools import combinations

def apriori(transactions, support_vector):
    unique_items = []
    for transaction in transactions:
        for item in transaction[1]:
            if item not in unique_items:
                unique_items.append(item);
    unique_items.sort()
    print("Unique Items: "+str(unique_items))
    print()

    # Candidate Set for 1-itemset = C1
    C1 = {}
    for item in unique_items:
        for transaction in transactions:
            if item in transaction[1]:
                if item in C1.keys():
                    C1[item]+=1
                else: C1[item] = 1
    print("Set of Candidate 1-itemset, C1: \n"+str(C1)+"\n")

    # Set of frequent 1-itemset = L1
    L1 = {}
    for item,count in zip(C1.keys(), C1.values()):
        if count>=support_vector:
            if item in L1: L1[itme]+=count
            else: L1[item] = count
    print("Set of frequen 1-itemset, L1: \n"+str(L1)+"\n")

    # Now, we will do the above for itemset 2..n
    Li = {} # Set of frequent i-itemset
    Ci = {} # Set of Candidatge i-itemset

    Li = L1 # Initializing
    Ci = C1 

    all_transaction = []
    for transaction in transactions:
        for item in transaction[1]:
            all_transaction.append(item)

    for itemset_size in range(2,100):
        # Join
        for i in range(0, len(Li)):
            for j in range(i+1, len(Li)):
                new_item = set(list(Li.keys())[i]).union(set(list(Li.keys())[j]))
                new_item = list(new_item)[0]
                if(itemset_size==len(new_item)):
                    if new_item in Ci.keys():
                        Ci[new_item] += 1
                    else: Ci[new_item] = 1
        # Prune
        for candidate in Ci:
            is_frequent = True
            for subset in combinations(candidate, itemset_size-1):
                if subset not in all_transaction:
                    is_frequent = False
                    break
                if is_frequent:
                    Li[candidate] = 0
        # Count 
        for candidate in Li:
            for item in all_transaction:
                if set(candidate).issubset(set(item)):
                    Li[candidate] += 1
        # Prune using Support Vector
        for candidate in Li.keys():
            if Li[candidate] < support_vector:
                del Li[key]

        if len(Li)==0: break

        print("List of frequent "+str(itemset_size)+"-itemset: \n"+str(Li)+"\n")
        
                

# Testing
transactions = [
        ['T100',['I1','I2','I5']],
        ['T200',['I2','I4']],
        ['T300',['I2','I3']],
        ['T400',['I1','I2','I4']],
        ['T500',['I1','I3']],
        ['T600',['I2','I3']],
        ['T700',['I1','I3']],
        ['T800',['I1','I2','I3','I5']],
        ['T900',['I1','I2','I3']]
        ]
apriori(transactions, support_vector=3)
