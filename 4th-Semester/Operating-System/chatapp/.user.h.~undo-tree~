(undo-tree-save-format-version . 1)
"100f805ded22985c7c4d27deb7f98ed4d02b4c0e"
[nil nil nil nil (25389 30061 712789 866000) 0 nil]
([nil nil ((nil rear-nonsticky nil 74 . 75) (#("
" 0 1 (c-in-sws t fontified nil)) . -94) (75 . 95) (nil face font-lock-string-face 74 . 75) (nil fontified t 74 . 75) (nil c-in-sws t 74 . 75) (74 . 75) 73 (t 25389 19880 567776 925000)) nil (25389 30061 712786 561000) 0 nil])
([nil nil ((85 . 91) (#("stdlib" 0 6 (c-in-sws t fontified t face font-lock-string-face)) . 85) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) 87) nil (25389 30061 712777 122000) 0 nil])
([nil nil ((119 . 126) (t 25389 30061 712890 517000)) nil (25389 30094 440458 36000) 0 nil])
([nil nil ((#(" = \"user-pass.txt\"" 0 2 (fontified t) 2 3 (fontified t) 3 18 (fontified t face font-lock-string-face)) . 160) (undo-tree-id9 . -17) (undo-tree-id10 . -17) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -18) (undo-tree-id25 . -17) (undo-tree-id26 . -17) (undo-tree-id27 . -17) (undo-tree-id28 . -17) (undo-tree-id29 . -17) (undo-tree-id30 . -17) (undo-tree-id31 . -17) (undo-tree-id32 . -17) (undo-tree-id33 . -16) (undo-tree-id34 . -16) (undo-tree-id35 . -16) (undo-tree-id36 . -16) (undo-tree-id37 . -16) (undo-tree-id38 . -15) (undo-tree-id39 . -15) (undo-tree-id40 . -15) (undo-tree-id41 . -15) (undo-tree-id42 . -15) (undo-tree-id43 . -14) (undo-tree-id44 . -14) (undo-tree-id45 . -14) (undo-tree-id46 . -14) (undo-tree-id47 . -14) (undo-tree-id48 . -13) (undo-tree-id49 . -13) (undo-tree-id50 . -13) (undo-tree-id51 . -13) (undo-tree-id52 . -13) (undo-tree-id53 . -12) (undo-tree-id54 . -12) (undo-tree-id55 . -12) (undo-tree-id56 . -12) (undo-tree-id57 . -12) (undo-tree-id58 . -11) (undo-tree-id59 . -11) (undo-tree-id60 . -11) (undo-tree-id61 . -11) (undo-tree-id62 . -11) (undo-tree-id63 . -10) (undo-tree-id64 . -10) (undo-tree-id65 . -10) (undo-tree-id66 . -10) (undo-tree-id67 . -10) (undo-tree-id68 . -9) (undo-tree-id69 . -9) (undo-tree-id70 . -9) (undo-tree-id71 . -9) (undo-tree-id72 . -9) (undo-tree-id73 . -8) (undo-tree-id74 . -8) (undo-tree-id75 . -8) (undo-tree-id76 . -8) (undo-tree-id77 . -8) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) (undo-tree-id82 . -7) (undo-tree-id83 . -6) (undo-tree-id84 . -6) (undo-tree-id85 . -6) (undo-tree-id86 . -6) (undo-tree-id87 . -6) (undo-tree-id88 . -5) (undo-tree-id89 . -5) (undo-tree-id90 . -5) (undo-tree-id91 . -5) (undo-tree-id92 . -5) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -4) (undo-tree-id96 . -4) (undo-tree-id97 . -4) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1)) nil (25389 30094 440444 113000) 0 nil])
([nil current ((275 . 284) (273 . 275) (272 . 273) (271 . 272) (266 . 271) (#("U" 0 1 (fontified t face font-lock-variable-name-face)) . -266) (undo-tree-id113 . -1) (#("C" 0 1 (fontified t face font-lock-variable-name-face)) . -267) (undo-tree-id114 . -1) (#("C" 0 1 (fontified t face font-lock-variable-name-face)) . -268) (undo-tree-id115 . -1) (#("E" 0 1 (fontified t face font-lock-variable-name-face)) . -269) (undo-tree-id116 . -1) (#("S" 0 1 (fontified t face font-lock-variable-name-face)) . -270) (undo-tree-id117 . -1) (#("S" 0 1 (fontified t face font-lock-variable-name-face)) . -271) (undo-tree-id118 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -272) (undo-tree-id119 . -1) (#("S" 0 1 (fontified t face font-lock-variable-name-face)) . -273) (undo-tree-id120 . -1) (#("T" 0 1 (fontified t face font-lock-variable-name-face)) . -274) (undo-tree-id121 . -1) (#("A" 0 1 (fontified t face font-lock-variable-name-face)) . -275) (undo-tree-id122 . -1) (#("T" 0 1 (fontified t face font-lock-variable-name-face)) . -276) (undo-tree-id123 . -1) (#("I" 0 1 (fontified t face font-lock-variable-name-face)) . -277) (undo-tree-id124 . -1) (#("S" 0 1 (fontified t face font-lock-variable-name-face)) . -278) (undo-tree-id125 . -1) 279 (267 . 279) (259 . 267) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -259) (undo-tree-id126 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -260) (undo-tree-id127 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -261) (undo-tree-id128 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -262) (undo-tree-id129 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -263) (undo-tree-id130 . -1) 264 (255 . 264) (252 . 255) (t 25389 30094 439829 45000) 251) nil (25389 30569 755713 680000) 0 nil])
nil
